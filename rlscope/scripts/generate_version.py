"""
Generate version information needed when building an RL-Scope pip package (a.k.a., wheel).
"""
import argparse
import subprocess
import textwrap
import sys
import os
import re
from os.path import join as _j, abspath as _a, exists as _e, dirname as _d, basename as _b
import datetime
import pytz

from rlscope.profiler.rlscope_logging import logger
from rlscope import py_config
from rlscope.profiler.util import pprint_msg

VERSION_PY = _j(py_config.ROOT, "rlscope", "version.py")
RLSCOPE_INIT_PY = _j(py_config.ROOT, "rlscope", "__init__.py")
TIME_ZONE = 'America/New_York'

class VersionGenerator:
    def __init__(self, args):
        self.args = args
        self._init_versions()

        self.utc_now = pytz.utc.localize(datetime.datetime.utcnow())
        self.tz_now = self.utc_now.astimezone(pytz.timezone(TIME_ZONE))

    def _init_versions(self):
        args = self.args
        self.cuda = args.cuda_version
        self.git_version = args.git_version
        if self.git_version is None:
            output = subprocess.check_output("git rev-parse HEAD", cwd=py_config.ROOT, shell=True)
            self.git_version = output.decode('utf-8').rstrip()
        self.debug_version = bool(args.debug_version)
        self.rlscope_version = py_config.read_rlscope_version()

    @property
    def today(self):
        return self.tz_now.strftime("%B %d, %Y @ %H:%M:%S %Z")

    def generate(self):
        self._generate_rlscope_init_py()
        self._generate_version_py()

    def write_py_header(self, f, **kwargs):
        self.write(f, """
            ##
            ## DO NOT MODIFY!
            ## AUTOGENERATED by scripts/generate_version.py on {date}
            ##
            """.format(
            date=self.today,
        ), **kwargs)

    @property
    def debug(self):
        return self.args.debug

    def write(self, f, txt, lstrip=True):
        txt_formatted = textwrap.dedent(txt)
        if lstrip:
            txt_formatted = txt_formatted.lstrip()
        if self.debug:
            logger.debug("Write to {f}:\n{txt}".format(
                txt=textwrap.indent(txt_formatted.rstrip(), prefix='  '),
                f=f.name,
            ))
        f.write(txt_formatted)

    def _generate_version_py(self):
        with open(VERSION_PY, 'w') as f:
            self.write_py_header(f)
            self.write(f, """
            # RL-Scope pip package version:
            # $ pip install rlscope=={rlscope_version} -f https://uoft-ecosystem.github.io/rlscope/whl
            # (synonym for rlscope.__version__)
            rlscope = "{rlscope_version}"
            
            # CUDA version.
            # NOTE: your DL framework (e.g., PyTorch, TensorFlow) CUDA version should match this.
            cuda = "{cuda}"
            
            # Git commit hash
            git_version = "{git_version}"
            
            # Is this a debug build?
            debug = {debug} 
            """.format(
                rlscope_version=self.rlscope_version,
                cuda=self.cuda,
                git_version=self.git_version,
                debug=self.debug_version,
            ), lstrip=False)
        logger.info("Output {path}".format(path=VERSION_PY))

    def _generate_rlscope_init_py(self):
        with open(RLSCOPE_INIT_PY, 'w') as f:
            self.write_py_header(f)
            self.write(f, """
            # RL-Scope pip package version:
            # $ pip install rlscope=={version} -f https://uoft-ecosystem.github.io/rlscope/whl
            __version__ = "{version}"
            
            __all__ = []
            
            from rlscope import \\
              api, \\
              version
            __all__.extend([
              'api',
              'version',
            ])
            """.format(
                version=self.rlscope_version,
            ), lstrip=False)
        logger.info("Output {path}".format(path=RLSCOPE_INIT_PY))


def main():
    parser = argparse.ArgumentParser(description=__doc__.rstrip())
    parser.add_argument("--debug-version",
                        action='store_true',
                        help=textwrap.dedent("""
                        If set, mark this as a "debug" build by setting:
                          rlscope.version.debug = True
                        """))
    parser.add_argument("--cuda-version",
                        default=os.environ.get('RLSCOPE_CUDA_VERSION', None),
                        help=textwrap.dedent("""
                        rlscope.version.cuda = ...
                        NOTE: If unset, assume we're in a docker container and get it from RLSCOPE_CUDA_VERSION.
                        """))
    parser.add_argument("--git-version",
                        # default=os.environ.get('RLSCOPE_CUDA_VERSION', None),
                        help=textwrap.dedent("""
                        rlscope.version.git_version = <git-commit-hash>
                        NOTE: If unset, use "git rev-parse HEAD" to determine git hash.
                        """))
    parser.add_argument("--debug",
                        action='store_true',
                        help=textwrap.dedent("""
                        Debug
                        """))
    args = parser.parse_args()

    generator = VersionGenerator(args)
    generator.generate()

if __name__ == '__main__':
    main()
